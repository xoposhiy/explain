#summary Лексический анализатор

= Что это за страница =

Это что-то вроде рабочего черновика — здесь будут появляться (возможно, в несколько небрежном виде) всякие вещи, связанные с текущим ходом работ по лексическому анализатору. (Более формализованный отчёт о том, что уже сделано, будет появляться в issue tracker'е в комментариях к соответственному issue.) Всё, что здесь написано, можно обсуждать путём редактирования этой страницы и механизма комментариев.

= "Наши" регулярные выражения =
Классические операции: 
{{{
abc 
a|or|b 
x*
}}}
Классы символов: 
{{{
[good]
[0-9]
[^bad]
[\[\]\-\^\\]
.
}}}
Экранирование:
{{{
\* \+ \? \| \. \( \) 
}}}
Итерации:
{{{
(maybe)?
(many)+
(3to5times){3,5}
}}}


= LL(1)-грамматика регулярных выражений =
Пока предварительно получается примерно такая грамматика !G_RegExp (eps — это пустая строка):

{{{
Regexp -> eps | Alt RegexpTail
RegexpTail -> eps | '|' Alt RegexpTail
Alt -> eps | Atom Postfix Alt
Atom -> СимволАлфавита | '(' Regexp ')'
Postfix -> eps | '*'
}}}

  # Дерево вывода для такой грамматики получается достаточно страшным, поэтому придётся немного переделать его перед тем, как преобразовывать это дерево в ДКА (или придумать лучшую грамматику).
  # Описывать грамматики в коде на данный момент жутко (мне пришлось это делать уже два раза, плюс есть ещё одна в классе Syntax). Надо придумать какой-нибудь унифицированный механизм.

= Преобразование регулярного выражения в детерминированный конечный автомат =

В книжке «Теория и реализация языков программирования» есть отличный [http://www.intuit.ru/department/sa/pltheory/3/3.html алгоритм] преобразования дерева разбора регулярного выражения сразу в ДКА. Он понятный и простой. По-моему, в результате его работы получается даже минимальный ДКА, но это требует проверки.

== Тестирование конечных автоматов ==

Нужно проверять, что по данному регулярному выражению получился правильный ДКА. Варианты:
  # Минимизировать полученный автомат и проверять на эквивалентность минимальному. Трудоёмко, но надёжно.
  # Прогонять ДКА на зафиксированном наборе слов. Менее надёжно, но много проще.
На этапе отладки ещё можно визуализировать ДКА в [http://www.graphviz.org/ Graphviz].