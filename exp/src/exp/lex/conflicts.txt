Конфликты при формировании LA.

DFA — это неполные конечные автоматы.

Два DFA называются конфликтными, если язык одного содержит какой либо префикс из языка другого.

Задача — по двум DFA понять, являются ли они конфликтными.


Идея решения:
Строим граф G=(V, E) из G1=(V1, E1) и G2=(V2, E2) — графов тестируемых DFA — следующим образом:
V = V1 x V2
e = (c, (v1, v2), (u1, u2)) \in E  <=> (c, v1, u1) \in E1 && (c, v2, u2) \in E2
Пусть i1, i2 — начальные состояния тестируемых DFA. 
Они конфликтны тогда и только тогда, когда в G есть путь от (i1, i2) до некоторой вершины (a, b),
в которой a или b являются конечными состояниями в соответсвующих DFA.

Описание алгоритма:
Искать путь с помощью BFS. В целях оптимизации граф не будм строить заранее —
будет строится только его необходимая часть по ходу работы BFS.
Граф будем представлять в виде обыкновенного орграфа (не мультиграфа!), 
рёбра которого помечены множеством символов.

Пусть в ходе BFS мы обрабатываем вершину (s_1, s_2).
Находим все состояния, в которые можно попасть в i-ом автомате из состояния s_i. 
В результате — два множества — S_1 и S_2. В следующий фронт волны нужно будет 
включить только вершины из S_1 x S_2. 
Для каждой ещё не пройденной BFS-ом вершины (q_1, q_2) \in S_1 x S_2 рассмотрим 
множества С_1, С_2, которыми помечены ребра ведущие из s_i в q_i.
Если пересечение C_1 и C_2 не пусто, то в графе G есть ребро (s_1, s_2)-(q_1, q_2), 
а вершина (q_1, q_2) попадает в следующий фронт, иначе - не попадает.

Требования к интерфейсу DFA:
1. Вычисление функции перехода за O(1).
2. Получение списка состояний, в который можно перейти по данному. 
Для каждого такого состояния — "множество символов", по которому в него можно попасть.
3. Уметь быстро определять пересекаются ли "множества символов"?
4. Получать начальное состояние.
5. Определять, являеется ли некоторе состояние конечным.